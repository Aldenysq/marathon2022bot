require('dotenv').config()
const TeleBot = require('telebot');
const configures = {
  token: process.env.TELEGRAM_TOKEN
};
const bot = new TeleBot(configures);
const db = require('./db');
let waitingTrainingScreen = {};

async function addTraining(msg) {
  if (msg.chat.type != 'supergroup') {
    return;
  }
  if (!(await allowedToAddTraining(msg))) {
    msg.reply.text("–¢—ã –¥–æ–±–∞–≤–ª—è–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞, –ø–æ-–º–æ–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å");
    return;
  }
  let username = msg.from.username;
  let text = msg.text.split(' ');
  let distance = text[1];
  let runTime = text[2];
  const minSecArray = runTime.split(':');
  if (isNaN(distance) || minSecArray.length != 2 || isNaN(minSecArray[0]) || isNaN(minSecArray[1])) {
    msg.reply.text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç");
    return;
  }
  let comment = text.slice(3).join(' ');
  let date = msg.date;
  distance = parseFloat(distance);
  const timeSec = parseFloat(minSecArray[0]) * 60 + parseFloat(minSecArray[1]);
  let training = makeTraining(distance, timeSec, comment, date);
  db.addTraining(username, training);
  await msg.reply.text("–Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ–±–∞—à–∏—à—å, " + username + "!");
  await msg.reply.text("—Ç–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å —Å–∫—Ä–∏–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");
  waitingTrainingScreen[username] = true;
}
async function allowedToAddTraining(msg){
  let numOfTrains = await db.getNumTrainings(msg.from.username);
  if (numOfTrains == 0) {
    return true;
  }
  let lastTrain = await db.getLastTrainings(msg.from.username, 1);
  lastTrain = lastTrain[0];
  let secSinceLastTraining = msg.date - lastTrain.date;
  let hoursSinceLastTraining = secSinceLastTraining / 3600;
  return (hoursSinceLastTraining >= 4);

}
function makeTraining(distance, timeSec, comment, date) {
  return {
    'distance' : distance,
    'timeSec' : timeSec, 
    'comment' : comment,
    'date' : date,
    'file_id' : 'null'
  }
}
bot.on('/–µ–±–∞—à—É', addTraining);

async function numOfTrainings(msg) {
  let username = msg.from.username;
  let num = await db.getNumTrainings(username);
  msg.reply.text("–£ —Ç–µ–±—è —É–∂–µ " + num + " —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫(–∏–∫) @" + username);
}
bot.on('/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫', numOfTrainings);

async function trains(msg) {
  let username = msg.from.username;
  text = msg.text.split(' ');
  let limit = 1000000;
  if (text.length > 1) {
      if (isNaN(text[1])) {
      msg.reply.text("–ö–æ–ª-–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º");
      return;
    }
    limit = parseInt(text[1]);
  }
  let num = parseInt(await db.getNumTrainings(username));
  limit = Math.min(limit, num);
  let response = await db.getLastTrainings(username, limit);
  let textResponse = "—Ç–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ " + limit + " —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏(–æ–∫): \n";
  for (train of response) {
    let runSecTime = train.timeSec;
    textResponse += "distance in km: " + train.distance + "\ntime [min:sec]: " + Math.floor(runSecTime/60) + ":" + runSecTime%60  + "\ncomment: " + train.comment + "\ndate: " + new Date(parseInt(train.date) * 1000) + "\n\n";
  }
  msg.reply.text(textResponse);
}
bot.on('/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', trains);

async function totalKm(msg) {
  let username = msg.from.username;
  text = msg.text.split(' ');
  let limit = 1000000;
  if (text.length > 1) {
    if (isNaN(text[1])) {
      msg.reply.text("–ö–æ–ª-–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º");
      return;
    }
    limit = parseInt(text[1]);
  }
  let num = parseInt(await db.getNumTrainings(username));
  limit = Math.min(limit, num);
  let distance = await db.getLastDistances(username, limit);
  msg.reply.text("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ " + limit + " —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫(–∫–∏) —Ç—ã –ø—Ä–æ–±–µ–∂–∞–ª " + distance + " –∫–º");
}
bot.on('/–¥–∏—Å—Ç–∞–Ω—Ü–∏—è', totalKm);

async function totalTime(msg) {  
  let username = msg.from.username;
  text = msg.text.split(' ');
  let limit = 1000000;
  if (text.length > 1) {
    if (isNaN(text[1])) {
      msg.reply.text("–ö–æ–ª-–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º");
      return;
    }
    limit = parseInt(text[1]);
  }
  let num = parseInt(await db.getNumTrainings(username));
  limit = Math.min(limit, num);
  let timeSec = await db.getLastTime(username, limit);
  let hours = Math.floor(timeSec/3600);
  let minutes = Math.floor((timeSec - hours * 3600)/60);
  msg.reply.text("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ " + limit + " —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫(–∫–∏) —Ç—ã –ø—Ä–æ–±–µ–∂–∞–ª " + hours + " —á–∞—Å–æ–≤(–∞) –∏ " + minutes + " –º–∏–Ω—É—Ç(—ã)");
}
bot.on('/–≤—Ä–µ–º—è', totalTime);

async function totalSpeed(msg) {
  let username = msg.from.username;
  text = msg.text.split(' ');
  let limit = 1000000;
  if (text.length > 1) {
    if (isNaN(text[1])) {
      msg.reply.text("–ö–æ–ª-–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º");
      return;
    }
    limit = parseInt(text[1]);
  }
  let num = parseInt(await db.getNumTrainings(username));
  limit = Math.min(limit, num);
  let timeSec = await db.getLastTime(username, limit);
  let time = timeSec/60;
  let distance = await db.getLastDistances(username, limit);
  if (distance == 0) {
    distance = 1;
  }
  let minPerKm = time/distance;
  let min = Math.floor(minPerKm);
  let sec = Math.ceil((minPerKm - min) * 60);
  msg.reply.text("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ " + limit + " —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫(–∫–∏) —Ç–≤–æ–π —Å—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –±—ã–ª " + min + " –º–∏–Ω—É—Ç(—ã) –∏ " + sec + " —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–º");
}
bot.on('/—Ç–µ–º–ø', totalSpeed);

async function leaderboard(msg) {
  let collections = await db.getMarathonUsernames();
  let results = [];
  for (marathoner of collections) {
    let username = marathoner.name;
    const numTrainings = await db.getNumTrainings(username);
    let userDist = await db.getLastDistances(username, numTrainings);
    let userTime = await db.getLastTime(username, numTrainings);
    userTime /= 60;
    results.push([userDist, userTime, username]);
  }
  results = results.sort(function(a, b) {return b[0] - a[0];});
  const awards = ["ü•á", "ü•à", "ü•â"];
  let responseText = "";
  let awardIndex = 0;
  for (marathoner of results) {
    const hours = Math.floor(marathoner[1]/60);
    const mins = Math.floor(marathoner[1] - hours * 60);
    responseText += awards[awardIndex] + " " + marathoner[2] + " –ø—Ä–æ–±–µ–∂–∞–ª " + marathoner[0] + " –∫–º –∑–∞ " + hours + " —á –∏ " + mins + " –º–∏–Ω\n";
    awardIndex += 1;
    awardIndex %= 3;
  }
  msg.reply.text(responseText);

}
bot.on('/—Ä–µ–π—Ç–∏–Ω–≥', leaderboard);


async function photoReceived(msg) {
  const username = msg.from.username;
  // ignore if training image is not expected
  if (waitingTrainingScreen[username] != true) {
    return;
  }
  const file_id = msg.photo[msg.photo.length - 1].file_id;  // get best photo resolution file id
  let lastTraining = await db.getLastTrainings(username, 1);
  lastTraining = lastTraining[0];
  await db.insertFileIdToLastTraining(username, lastTraining, file_id);
  waitingTrainingScreen[username] = false;
  return msg.reply.text('—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∑–∞–ø–∏—Å–∞–ª, –º–æ–ª–æ–¥–µ—Ü!')
  

}
bot.on('photo', photoReceived);

async function getLastPhotoTraining(msg) {
  const username = msg.from.username;
  let lastTraining = await db.getLastTrainings(username, 1);
  lastTraining = lastTraining[0];
  msg.reply.photo(lastTraining.file_id);

}
bot.on('/lastimg', getLastPhotoTraining);


async function help(msg) {
  let responseText = "–Ø marathonBot –∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω –≥–µ–Ω–∏–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –∫–æ—Ç–æ—Ä—ã–π —Å–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n";
  responseText += "–Ø —É–º–µ—é: \n";
  responseText += "/–µ–±–∞—à—É <–¥–∏—Å—Ç–∞–Ω—Ü–∏—è –≤ –∫–º> <–º–∏–Ω:—Å–µ–∫> {–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π>} *- –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É; –ø–∞—Ä–∞–º–µ—Ç—Ä <–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π> –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π*\n";
  responseText += "/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ *- —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–æ–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫*\n";
  responseText += "/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ {<–∫–æ–ª-–≤–æ>} *- –æ—Ç—á–µ—Ç —Ç–≤–æ–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö <–∫–æ–ª-–≤–æ> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫; –ø–∞—Ä–∞–º–µ—Ç—Ä <–∫–æ–ª-–≤–æ> –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Ç–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n";
  responseText += "/–¥–∏—Å—Ç–∞–Ω—Ü–∏—è {<–∫–æ–ª-–≤–æ>} *- —Ç–≤–æ—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –≤ –∫–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ <–∫–æ–ª-–≤–æ> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫; –ø–∞—Ä–∞–º–µ—Ç—Ä <–∫–æ–ª-–≤–æ> –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Ç–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n";
  responseText += "/–≤—Ä–µ–º—è {<–∫–æ–ª-–≤–æ>} *- —Ç–≤–æ–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è –±–µ–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ <–∫–æ–ª-–≤–æ> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫; –ø–∞—Ä–∞–º–µ—Ç—Ä <–∫–æ–ª-–≤–æ> –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Ç–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n";
  responseText += "/—Ç–µ–º–ø {<–∫–æ–ª-–≤–æ>} *- —Ç–≤–æ–π —Ç–µ–º–ø –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ <–∫–æ–ª-–≤–æ> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫; –ø–∞—Ä–∞–º–µ—Ç—Ä <–∫–æ–ª-–≤–æ> –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Ç–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n";
  responseText += "/lastimg *- –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n";
  responseText += "/—Ä–µ–π—Ç–∏–Ω–≥ *- —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –±–µ–≥—É–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø–µ*\n";
  responseText += "/help *- —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥*\n";
  msg.reply.text(responseText, {parseMode: 'Markdown' });

}
bot.on('/help', help);

bot.start();

